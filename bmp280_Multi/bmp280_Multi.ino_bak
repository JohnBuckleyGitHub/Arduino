
#include <math.h>
//#include <LiquidCrystal.h>
#include <OneWire.h> 
#include <Wire.h>
#include <SoftwareSerial.h> //For bluetooth
#include <FastCRC.h>
#include "BMP280.h"

#define ONE_WIRE_BUS 6


//LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
SoftwareSerial BT(8,9);   //Use pins 8 and 9 (Rx/Tx)

OneWire oneWire(ONE_WIRE_BUS); 
FastCRC16 CRC16;

int flStream;

#define TCAADDR 0x70

unsigned long BTDelay=10;  //Number of milliseconds between BT sample sending.
unsigned long LCDDelay = 100; //Number of milliseconds between LCD refresh    
unsigned long BTTime=0;
unsigned long LCDTime=0;
unsigned long lTime;   //Time in milloseconds for sampling offsets;
unsigned long lStart; //Time in milloseconds at start of logging;
const unsigned int NBytes = 22; //Number of bytes in packet
unsigned long NPackets=0;
byte bStream[NBytes];

//Global variables to store values which we then pass to BT and LCD:
int32_t Press=0;
int32_t Temp=0;

//Settings values
byte bF4=0x57;
byte bF5=0xC;
byte bCom=0;

//BMP280 object at address 0x76:
BMP280 baro_array[] = {(0x77),(0x76),(0x77),(0x76),(0x77),(0x76),(0x77),(0x76)};
uint8_t tloc[] = {0,0,1,1,2,2,3,3};
unsigned int sensorCount=(sizeof(baro_array)/sizeof(*baro_array));  // It would be nice if c had a length function
//unsigned int sensorCount=2;
//BMP280 myBMP280_A(0x76);
//BMP280 myBMP280_B(0x77);

void setup() {
  //Start LCD library - my display is 20x4
//  lcd.begin(20, 4);
  Serial.begin(38400);
  init_bmp();
//  tcaselect(3);
//  //BMP280 setup - sensor 1:
//  //Get calibration figures:
//  myBMP280_A.Get_Cal();
//  //Send starting config.  THis also puts into streaming mode.
//  myBMP280_A.write(0xF4, bF4);
//  myBMP280_A.write(0xF5, bF5);
//  //BMP280 setup - sensor 2:
//  //Get calibration figures:
//  myBMP280_B.Get_Cal();
//  //Send starting config.  THis also puts into streaming mode.
//  myBMP280_B.write(0xF4, bF4);
//  myBMP280_B.write(0xF5, bF5);
    
  //Setup bluetooth and timing:
  BT.begin(115200);
  lStart=millis();
  pinMode(10, OUTPUT);  //LED to say when we are logging.
  flStream=false;
  digitalWrite(10,LOW);
}

void loop() {
  //Check for incoming bluetooth message:
  HandleBTIncoming();
  //Get data from BMP280 and put into stream:
  delay(50);
  BMPDataToStream();
  if ((millis()-BTTime)>BTDelay)
  {
    BTTime=millis();
    WriteDataToBT();
  }
//  Have removed the LCD:
//  if ((millis()-LCDTime)>LCDDelay)
//  {
//    LCDTime=millis();
//    RefreshLCD();
//  }
}

void init_bmp() {
  for(int i=0; i < sensorCount; i++)
  {
    tcaselect(tloc[i]);
    baro_array[i].Get_Cal();
    baro_array[i].write(0xF4, bF4);
    baro_array[i].write(0xF5, bF5); 
  }
}

void HandleBTIncoming()
{
  //Handle incoming bluetooth message:
  if (BT.available())
  {
    byte a=BT.read();
    bCom=a;
    switch (a){
      case 2: StopStreaming();
              break;
      case 1: StartStreaming();
              break;
      case 3: SendSettings();
              break;
      case 4: ReceiveSettings();
              break;
      //Buckley Android code sending ascii - 49/50 for 1/2..
      case 50: StopStreaming();
              break;
      case 49: StartStreaming();
              break;
    }
  }
}

void StartStreaming()
{
      lStart=millis();
      flStream=1;
      digitalWrite(10,HIGH);
      NPackets=0;
}

void StopStreaming()
{
      flStream=0;
      digitalWrite(10,LOW);
}

void SendSettings()
{
  byte* bSettings;
//  bSettings = myBMP280_A.Get_Settings();
//  BT.write(bSettings,2);
  
}

void ReceiveSettings()
{
  //Expect to receive two values: 0xF4 and 0xF5:
  //Should modify this in due course to include a checksum..
  bF4=BT.read();
  bF5=BT.read();
  //Write data to BMP280:
//  myBMP280_A.write(0xF4, bF4);
//  myBMP280_A.write(0xF5, bF5);
//  myBMP280_B.write(0xF4, bF4);
//  myBMP280_B.write(0xF5, bF5);
}

void BMPDataToStream()
{
  //Gets data from BMP280 and puts into stream.
  //Get data from BMP280:
//  BMP280Data MyData_A=myBMP280_A.Get_Data();
//  BMP280Data MyData_B=myBMP280_B.Get_Data();
  BMP280Data MyData[sensorCount];
//  BMP280Data MyData_A = baro_array[0].Get_Data();
//  BMP280Data MyData_B = baro_array[1].Get_Data();
  long data_sum = 0;
  for(int i=0; i < sensorCount; i++)
  {
//    tcaselect(tloc[i]);
    tcaselect(0);
    MyData[i] = baro_array[i].Get_Data();
//    Serial.println(i);
//    baro_array[i].Print_Values(); 
    data_sum = data_sum + MyData[i].Press;
  }
  long avg = data_sum / sensorCount;
  Serial.println(avg);
  //Build byte array to send over bluetooth:
  //Timestamp (4 bytes)
  //Temperature sensor A as float (4 bytes)
  //Pressure sensor A as float (4 bytes)
  //Temperature sensor B as float (4 bytes)
  //Pressure sensor B as float (4 bytes)
  //Checksum - two bytes
  //So 22 bytes total:
  //Each value is 32 bits, so need to convert them to byte arrays first:
  byte b[4];
//  Write time in microseconds:
//  UnsignedLongToByteArray(b,millis()-lStart);
//  for (int i=0;i<4;i++)
//  {
//    bStream[i]=b[i];
//  }
//  //Temperature sensor A:
//  Serial.println("A Sensor");
//  Serial.println(MyData_A.Temp);
//  LongToByteArray(b,MyData_A.Temp);
//  for (int i=0;i<4;i++)
//  {
//    bStream[i+4]=b[i];
//  }
//  //Pressure sensor A:
//  Serial.println(MyData_A.Press);
//  LongToByteArray(b,MyData_A.Press);
//  for (int i=0;i<4;i++)
//  {
//    bStream[i+8]=b[i];
//  }
  
//  //Temperature sensor B:
//  Serial.println("B Sensor");
//  Serial.println(MyData_B.Temp);
//  LongToByteArray(b,MyData_B.Temp);
//  for (int i=0;i<4;i++)
//  {
//    bStream[i+12]=b[i];
//  }
//  // Pressure sensor B:
//  Serial.println(MyData_B.Press);
//  LongToByteArray(b,MyData_B.Press);
//  for (int i=0;i<4;i++)
//  {
//    bStream[i+16]=b[i];
//  }
}


void WriteDataToBT()
{
  if (flStream==1)
  {
    //Checksum using fastcrc 16 bit ccitt scheme.
    byte bTest[4];
    for (byte i=0;i<4;i++)
    {
      bTest[i]=i;
    }
    uint16_t checksum=CRC16.ccitt(bStream,NBytes-2);
    byte b[2];
    b[0]=(checksum>>8) & 0xFF;
    b[1]=checksum & 0xFF;
    UnsignedLongToByteArray(b,checksum);
    bStream[NBytes-2]=b[0];
    bStream[NBytes-1]=b[1];
    BT.write(bStream,NBytes);
    NPackets++;
  }
}

void tcaselect(uint8_t i)
{
  if (i > 7) return; 
//  delay(10);
  Wire.beginTransmission(TCAADDR);
  Wire.write(1 << i);
  Wire.endTransmission();  
//  delay(10);
}

void UnsignedLongToByteArray(byte *b, uint16_t x){
//Following returns with least significant byte first!
  * (uint16_t *) b=x;
}

void LongToByteArray(byte *b, long x){
//Following returns with least significant byte first!
  * (long *) b=x;
}

void ShortToByteArray (byte *b,uint16_t x)
{
  * (uint16_t *) b=x;
}

void FloatToByteArray(byte *b, float x){
  * (float *) b=x;
}

